name: Cleanup Old Images

on:
  schedule:
    # Run weekly on Sundays at 2 AM UTC
    - cron: '0 2 * * 0'
  workflow_dispatch: # Allow manual triggering

jobs:
  cleanup_old_images:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Clean up old experimental images
        uses: actions/github-script@v7
        with:
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const cutoffDate = new Date();
            cutoffDate.setDate(cutoffDate.getDate() - 7); // Keep images for 7 days
            
            try {
              // Get all package versions
              const { data: versions } = await github.rest.packages.getAllPackageVersionsForPackageOwnedByOrg({
                package_type: 'container',
                package_name: repo,
                org: owner,
                per_page: 100
              });
              
              let deletedCount = 0;
              
              for (const version of versions) {
                const versionDate = new Date(version.created_at);
                const tags = version.metadata.container.tags;
                
                // Check if this is an experimental PR image that's older than cutoff
                const isOldPrImage = tags.some(tag => 
                  tag.startsWith('pr-') && versionDate < cutoffDate
                );
                
                // Check if this is a draft image that's older than cutoff
                const isOldDraftImage = tags.includes('latest-draft') && versionDate < cutoffDate;
                
                if (isOldPrImage || isOldDraftImage) {
                  console.log(`Deleting old version ${version.id} with tags: ${tags.join(', ')} (created: ${versionDate.toISOString()})`);
                  
                  await github.rest.packages.deletePackageVersionForOrg({
                    package_type: 'container',
                    package_name: repo,
                    org: owner,
                    package_version_id: version.id
                  });
                  
                  deletedCount++;
                }
              }
              
              console.log(`Cleanup completed. Deleted ${deletedCount} old experimental images.`);
            } catch (error) {
              console.log('Error during cleanup:', error.message);
              throw error;
            }
